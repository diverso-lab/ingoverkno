<style>
#instance_form {
  font-family: Arial, sans-serif;
  width: 100%;
}

body{
  margin:0;
  -webkit-user-select: none; /* Chrome, Safari, and Opera */
  -moz-user-select: none;    /* Firefox */
  -ms-user-select: none;     /* Internet Explorer */
  user-select: none; /* Standard syntax */
}

nav{
  width: 100%;
  height: 10em;
  position: relative;
}

.upperHeader{
  background-color: rgb(26,25,23);
  height: 30%;
}

.bottomHeader{
  background-color: rgb(237,236,235);
  height: 70%;
}

nav img{
  position: absolute;
  height: 80%;
  margin-left: 3em;
  margin-top: 1em;
}

table {
	margin: 20px 0;
	border-collapse: collapse;
	table-layout: auto;
	margin: 2em auto;
}

th, td {
	padding: 12px 20px;
	text-align: left;
	border: 0;
	border-bottom: 0.2em solid white;
}

th {
  background-color: rgb(237,236,235);
	color: black;
	white-space: nowrap;
}
td {
  background-color: rgb(237,236,235);
	color: black;
	white-space: nowrap;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(-360deg); }
}

#loading {
  animation: spin 2s linear infinite;
}

i {
	color: black
}

</style>

<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">

<script>

	//Update Button Info on startup
	document.addEventListener('DOMContentLoaded', function() {
		const buttons = document.querySelectorAll('.start-button');
		buttons.forEach(button => {
			if(button.dataset.status === 'running') {
				button.innerHTML = '<i class="material-icons">stop</i>';
			}else if(button.dataset.status === 'shut') {
				button.innerHTML = '<i class="material-icons">play_arrow</i>';
			}
			updateButton(button)
		});
	});

	function updateInstanceStatusDisplay(instanceId, status) {
    const instanceRow = document.querySelector(`tr[data-instance-id="${instanceId}"]`); // Make sure to add data-instance-id in your HTML
    if (instanceRow) {
        const statusCell = instanceRow.querySelector('td.instance-status');
        if (statusCell) {
            statusCell.textContent = status; // Update text
        }
    }
	}

	//Update Button Info
	function updateButton(button) {
		button.addEventListener('click', function(e) {
			e.preventDefault();
			const status = button.dataset.status;
			const instanceId = button.dataset.instanceId;

			if (status === 'shut') {
				this.innerHTML = '<i class="material-icons" id="loading">loop</i>';
				startInstance(instanceId, button);
			} else if (status === 'running') {
				this.innerHTML = '<i class="material-icons" id="loading">loop</i>';
				stopInstance(instanceId, button);
			}
		});

		if (button.dataset.status === 'pending') {
			button.innerHTML = '<i class="material-icons" id="loading">loop</i>';
			checkStatus(button.dataset.instanceId, button);
		}
	}

	function updateButtonStatus(button, status) {
		const instanceId = button.dataset.instanceId;
		button.dataset.status = status;
		updateInstanceStatusDisplay(instanceId, status);
		if(status === 'running') {
			button.innerHTML = '<i class="material-icons">stop</i>';
			updateButton(button)
		} else if(status === 'shut') {
			button.innerHTML = '<i class="material-icons">play_arrow</i>';
			updateButton(button)
		}
	}

	function startInstance(instanceId, button) {
		const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

		fetch(`/instances/${instanceId}/start`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'X-CSRF-Token': csrfToken
			},
			credentials: 'same-origin' // Ensure cookies are sent with the request if same-origin
		})
		.then(response => {
			if (response.ok) {
				checkStatus(instanceId, button);
			} else {
				console.error('Failed to start instance: ' + response.statusText);
			}
		})
		.catch(error => console.error('Error:', error));
	}

	function stopInstance(instanceId, button) {
		const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
		console.log('Stopping Instance')
		fetch(`/instances/${instanceId}/stop`, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
				'X-CSRF-Token': csrfToken
			},
			credentials: 'same-origin'
		})
		.then(response => {
			if (response.ok) {
				checkStatus(instanceId, button);
			} else {
				console.error('Failed to stop instance: ' + response.statusText);
			}
		})
		.catch(error => console.error('Error:', error));
	}

	function checkStatus(instanceId, button) {
		const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
		const interval = setInterval(() => {
			fetch(`/instances/${instanceId}/status`, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json',
					'X-CSRF-Token': csrfToken
				},
				credentials: 'same-origin'
			})
			.then(response => response.json())
			.then(data => {
				updateButtonStatus(button, data.status);
				if (data.status !== 'pending') {
					clearInterval(interval);
				}
			})
			.catch(error => {
				console.error('Error checking status:', error);
				clearInterval(interval);
			});
		}, 2000); // Check every 2 seconds
	}
</script>


<nav>
  <img src = "/images/ingoverkno-logo.png"/>
  <div class= 'upperHeader'>
  </div>
  <div class= 'bottomHeader'>
  </div>
</nav>

<table> <!-- Adding a border for visibility -->
	<tr>
		<th>Instance</th>
		<th>Port</th>
		<th>Multi Tenant</th>
		<th>Status</th>
		<th></th>
		<th></th>
		<th></th>
		<th></th>
	</tr>
	<% @instances.each do |instance| %>
		<tr data-instance-id="<%= instance.id %>">
			<td><%=instance.name%></td>
			<td><%=instance.port%></td>
			<td><%=instance.multi_tenant%></td>
			<td class="instance-status"><%= instance.status %></td>
			<td><i class="material-icons" style='color: black'>remove_red_eye</i></td>
			<td>
				<%= link_to '#', class: 'button start-button', id: "start-button-#{instance.id}", data: {status: instance.status, instance_id: instance.id} do %>
					<i class="material-icons">play_arrow</i>
				<% end %>
			</td>
			<td><i class="material-icons" style='color: black'>publish</i></td>
			<td><i class="material-icons" style='color: black'>delete</i></td>
		</tr>
	<% end %>
</table>
